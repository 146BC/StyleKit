{
  "name": "StyleKit",
  "tagline": "A powerful & easy to use styling framework written in Swift",
  "body": "StyleKit is a microframework that enables you to style your applications using a simple JSON file. Behind the scenes, StyleKit uses [UIAppearance](https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAppearance_Protocol/) and some selector magic to apply the styles. You can also customize the parser for greater flexibility.\r\n\r\n\r\n###How does it work?\r\n\r\n####Create a JSON file in the following format\r\n\r\n```js\r\n{\r\n\t\"UILabel\": {\r\n\t\t\"font\": \"HelveticaNeue-Bold:30.0\",\r\n\t\t\"backgroundColor\": \"#000FFF\"\r\n\t},\r\n\t\"StyleKitDemo.SKView\": {\r\n\t\t\"StyleKitDemo.SKLabel\": {\r\n\t\t\t\"font\": \"HelveticaNeue-Bold:20.0\",\r\n\t\t\t\"backgroundColor\": \"#FFF000\",\r\n\t\t\t\"color\": \"#fff\"\r\n\t\t},\r\n\t\t\"StyleKitDemo.SKButton\": {\r\n\t\t\t\"font\": \"HelveticaNeue-Light:20.0\",\r\n\t\t\t\"titleColor:normal\": \"#FFFFFF\",\r\n\t\t\t\"titleColor:highlighted\": \"#000000\"\r\n\t\t}\r\n\t},\r\n\t\"StyleKitDemo.SKNavigationBar\": {\r\n\t\t\"titleTextAttributes\": {\r\n\t\t\t\"NSColor\": \"#000FFF\",\r\n\t\t\t\"NSFont\": \"HelveticaNeue-Bold:30.0\"\r\n\t\t}\r\n\t},\r\n\t\"StyleKitDemo.SKTextField\": {\r\n\t\t\"font\": \"HelveticaNeue-Light:20.0\",\r\n\t\t\"textColor\": \"#000FFF\"\r\n\t}\r\n}\r\n```\r\n####Load JSON file\r\n\r\n*AppDelegate.swift*\r\n\r\n```swift\r\nfunc application(application: UIApplication,\r\n                 didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\r\n\r\n    if let styleFile = NSBundle.mainBundle().URLForResource(\"style\", withExtension: \"json\") {\r\n        StyleKit(fileUrl: styleFile)?.apply()\r\n    }\r\n\r\n    return true\r\n}\r\n```\r\n\r\nOn application launch the JSON file will be loaded and the styles applied.\r\n\r\n\r\n###The JSON file structure\r\n\r\nEach object inside the JSON file should contain the name of the UIView as a key and the object inside should either contain the properties/functions that need to be set/called or another UIView, this will give you the ability to apply styles on views when contained in other views, an example of this would be the following.\r\n\r\n```js\r\n{\r\n\t\"UIButton\": {\r\n\t\t\"font\": \"HelveticaNeue-Bold:20.0\"\r\n\t},\r\n\t\"MyApp.LoginView\": {\r\n\t\t\"UIButton\": {\r\n\t\t\t\"font\": \"HelveticaNeue-Light:25.0\"\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nThis would apply HelveticaNeue-Bold with size 20 to all the UIButtons except the ones contained inside the LoginView class in your app.\r\n\r\nCustom classes must be namespaced by the name of the module they are contained in. e.g. `StyleKitDemo.SKTextField`\r\n\r\n###Bring Your Own Parser\r\n\r\nStyleKit's initialiser supports passing a custom parser which should conform to the `StyleParsable` protocol.\r\n\r\n*Default Parser*\r\n\r\n```swift\r\nclass StyleParser: StyleParsable {\r\n\r\n    func getStyle(forName name: String, value: AnyObject) -> AnyObject {\r\n\r\n        if let value = value as? String {\r\n            if let font = FontHelper.parseFont(value) {\r\n                return font\r\n            } else if let color = ColorHelper.parseColor(value) {\r\n                return color\r\n            }\r\n        }\r\n        return value\r\n\r\n    }\r\n}\r\n```\r\n\r\n*AppDelegate.swift*\r\n\r\n```swift\r\nfunc application(application: UIApplication,\r\n                 didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\r\n\r\n    if let styleFile = NSBundle.mainBundle().URLForResource(\"style\", withExtension: \"json\") {\r\n\t\tStyleKit(fileUrl: styleFile, styleParser: StyleParser())?.apply()\r\n    }\r\n\r\n    return true\r\n}\r\n```\r\n\r\n###How to install?\r\n\r\n####Carthage\r\n\r\n```ogdl\r\ngithub \"146BC/StyleKit\" ~> 0.3\r\n```\r\n\r\n####CocoaPods\r\n\r\nAdd the 146BC Source\r\n\r\n```ruby\r\nsource 'https://github.com/146BC/Specs.git'\r\nsource 'https://github.com/CocoaPods/Specs.git'\r\n```\r\n\r\n```ruby\r\npod 'StyleKit', '~> 0.3'\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}